# Copyright (C) 2007-2008 Michael Homer <=mwh>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


def _clone(ofunc, nfunc):
    nfunc.__name__ = ofunc.__name__
    nfunc.__doc__ = ofunc.__doc__
    nfunc.__dict__.update(ofunc.__dict__)


def decorator(decorator):

    def new(func):

        def new2(*args, **kw):
            return decorator(func, *args, **kw)
        _clone(func, new2)
        return new2
    return new


@decorator
def memoised(func, *args, **kw):
    if not hasattr(func, '_cache'):
        func._cache = dict()
    d = func._cache
    if args in d:
        return d[args]
    result = func(*args, **kw)
    d[args] = result
    return result


@decorator
def logged(func, *args, **kw):
    import sys
    sys.stderr.write("Calling %s with %r"%(func.__name__, args))
    return func(*args, **kw)


def deprecated(major, minor, patch):

    def new(func):
        msg = "%s is deprecated as of %i.%i.%i"%(
                func.__name__, major, minor, patch)

        def new2(*args, **kw):
            import warnings
            warnings.warn(msg, DeprecationWarning, 2)
            return func(*args, **kw)
        _clone(func, new2)
        return new2
    return new


def subscriptable(func):

    class MethodReplacement:

        def __init__(self):
            self.func = func
            self.__name__ = func.__name__
            self.__doc__ = func.__doc__
            self.__dict__.update(func.__dict__)

        def __call__(self, *args):
            return self.func(*args)

        def __getitem__(self, *args):
            return self.func(*args)
    mr = MethodReplacement()
    _clone(func, mr)
    return mr

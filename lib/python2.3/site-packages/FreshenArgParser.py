import sys

class FreshenArgParser(object):
	def __init__(self, ui):
		self.fetched = False
		self.ui = ui
		self.freshen = None
	def fetch(self):
		if self.fetched:
			return
		self.fetched = True
		self.skipSet = set()
		self.toExamine = set()
		self.mode = 'updating'
		self.noCache = False
		self.forceCache = False
		self.action = self.ui.showUpdates
		self.limit = None
		catching = self.toExamine
		singleCatch = ''
		for arg in sys.argv[1:]:
			if arg=='-x' or arg=='--exclude':
				catching = self.skipSet
			else:
				reset = True # Reset catching to toExamine if we hit a non-list option
				if arg=='--thorough':
					self.mode = 'all'
				elif arg=='--no-cache' or arg=='-C':
					self.noCache = True
				elif arg=='--force-cache' or arg=='-c':
					self.forceCache = True
				elif arg=='--limit' or arg=='-l':
					singleCatch = 'limit'
				elif arg=='-U':
					self.action = self.ui.installUpdates
				elif arg=='--help':
					self.action = self.ui.showHelp
				elif arg=='--version':
					self.action = self.ui.showVersion
				elif arg=='--no-colour':
					for c in Screen.colours:
						Screen.colours[c] = ''
				elif arg=='--':
					catching = toExamine
				elif singleCatch:
					self.__dict__[singleCatch] = arg
					singleCatch = ''
				elif arg[0:2]=='--':
					Log_Error("Invalid argument "+arg, 'Freshen')
					exit()
				else:
					catching.add(arg)
					reset = False
				if reset: catching = self.toExamine
		self.progString = ', '.join(self.toExamine)
		self.toExamine = frozenset(self.toExamine)
		self.skipSet = frozenset(self.skipSet)
		self.cacheDataID = hash(self.toExamine)
	def __getattr__(self, name):
		self.fetch()
		if 'examineSet' == name:
			if self.toExamine:
				return self.toExamine
			else:
				if self.mode == 'all':
					self.toExamine = frozenset(self.freshen.installedPrograms())
				else:
					self.toExamine = frozenset(prog for prog in self.freshen.installedPrograms() if self.freshen.updateAvailable(prog))
				#
				self.cacheDataID = hash(self.toExamine)
				self.progString = 'all'
				return self.toExamine
		return self.__dict__[name]

#!/usr/bin/ruby
# Copyright (C) 2007 Michael Homer
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Include Freshen libraries as well
dirname = File.dirname(`readlink -f #{$0}`)
$: << File.expand_path("#{dirname}/../lib/")

require 'version'
require 'consoleapplication'
require 'program'
require 'repository'
require 'reciperepository'
require 'programrepository'
require 'collectionrepository'

class Freshen < ConsoleApplication
	version "3.0.0alpha1"
	description "Updates GoboLinux recipes and packages"
	credits "Copyright (C) 2007 Michael Homer <michael@e.geek.nz>"
	usage "[<opts>] [<mode>] [<list>]"

	has_mode :upgrade, 'Upgrade the packages listed, or the whole system if none specified', :U
	has_mode :info, 'Display detailed information about the listed program(s)', :i
	has_opt :exclude, 'Exclude <list> from consideration', :x
	has_flag :'ignore-revisions', 'Do not consider updating e.g. -r2 to -r3', :r, lambda {Version.useRevisions = false}
	
	def run_upgrade(list)
		out "Would upgrade #{list.join(', ')}"
		out "Would exclude #{option(:exclude)[:list].join(', ')}"
	end
	
	def run_info(list) 
		out "Would display info for #{list.join}"
	end
	
	def run_default(list)
		out "Would exclude the following: #{option(:exclude)[:list].join(', ')}" if option(:exclude)
		out "Unordered list of updates, paying no attention to exclusions or upper limits:"
		begin
		p = ProgramRepository.new
		rr = RecipeRepository.new('/Files/Compile/Recipes', nil)
		r = CollectionRepository.new
		r.add rr
		p.all.each {|prog|
			vs = r[prog.name]
			if vs.length>0 and vs[-1] > prog.current
				if prog.installed?(vs[-1])
					#debug "#{prog} #{vs[-1]} is installed but not symlinked over older current of #{prog.current})"
				else
					#out "New version of #{prog}: #{vs[-1]} > #{prog.current}"
					puts format_program(prog, vs[-1])
				end
			end
		}
		rescue Exception
			error $!
			backtrace
		end
	end
	
	private
	def format_program(prog, newver)
		@introducedBy = Hash.new
		if !prog.installed?
			upg = ' '
		elsif prog.current>newver
			upg = "#{Screen.colour['red']}D#{Screen.colour['normal']}"
		elsif prog.current<newver
			upg = "#{Screen.colour['cyan']}U#{Screen.colour['normal']}"
		else
			upg = ' '
		end
		progcol = Screen.colour['green']
		prs = '-'
		if newver<prog.current
			progcol = Screen.colour['red']
		end
		if prog.installed?
			ins = 'I'
		else
			ins = Screen.colour['green']+"N"+Screen.colour['normal']
		end
		@introducedBy[prog] = " ("+@introducedBy[prog]+")" if @introducedBy[prog]
		"[#{ins}#{upg}#{prs}] #{progcol}#{prog.name} #{newver}#{Screen.colour['normal']}#{@introducedBy[prog]}#{' '*(Screen.width-7-prog.name.length-newver.to_s.length-prog.current.to_s.length-@introducedBy[prog].to_s.length)}#{prog.current}\n"
	end
end

ConsoleApplication.run Freshen